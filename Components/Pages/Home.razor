@page "/"
@using MyBlazorServerApp.Resources
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

<PageTitle>FrontendApiExample</PageTitle>

<div class="container mx-auto px-4 py-8">
  <div class="max-w-xl mx-auto bg-white p-8 rounded-lg shadow-lg">
    <h1 class="text-3xl font-bold mb-6 text-center text-gray-800">API Calculator</h1>
    <p class="text-center text-gray-600 mb-8">Choose a mode to begin your calculation.</p>

    <!-- Mode Selection Tabs -->
    <div class="flex justify-center mb-6">
      <button @onclick="() => SetMode(CalculationMode.Installment)"
              class="@(currentMode == CalculationMode.Installment ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800") transition-colors duration-300 py-2 px-6 rounded-l-full font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
        Calculate Installment
      </button>
      <button @onclick="() => SetMode(CalculationMode.Duration)"
              class="@(currentMode == CalculationMode.Duration ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800") transition-colors duration-300 py-2 px-6 rounded-r-full font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
        Calculate Duration
      </button>
    </div>

    @if (currentMode == CalculationMode.Installment)
    {
      <div class="space-y-4">
        <div class="flex flex-col">
          <label for="amount1" class="text-sm font-semibold text-gray-700 mb-1">Total Amount</label>
          <input type="number" @bind="amount" id="amount1" class="form-input rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="e.g., 1000" />
        </div>
        <div class="flex flex-col">
          <label for="installments" class="text-sm font-semibold text-gray-700 mb-1">Number of Installments</label>
          <input type="number" @bind="numberOfInstallments" id="installments" class="form-input rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="e.g., 12" />
        </div>
        <button @onclick="CalculateInstallment"
                class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-md shadow-md transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
          Calculate Monthly Installment
        </button>
      </div>
    }
    else
    {
      <div class="space-y-4">
        <div class="flex flex-col">
          <label for="amount2" class="text-sm font-semibold text-gray-700 mb-1">Total Amount</label>
          <input type="number" @bind="amount" id="amount2" class="form-input rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="e.g., 1000" />
        </div>
        <div class="flex flex-col">
          <label for="monthlyRate" class="text-sm font-semibold text-gray-700 mb-1">Monthly Installment</label>
          <input type="number" @bind="monthlyInstallment" id="monthlyRate" class="form-input rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" placeholder="e.g., 50" />
        </div>
        <button @onclick="CalculateDuration"
                class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-md shadow-md transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
          Calculate Duration
        </button>
      </div>
    }

    @if (!string.IsNullOrWhiteSpace(responseMessage))
    {
      <div class="mt-8 p-4 bg-gray-100 rounded-md text-center text-lg font-medium">
        @responseMessage
      </div>
    }
  </div>
</div>

@code {
  private double amount;
  private int numberOfInstallments;
  private double monthlyInstallment;
  private string? responseMessage;
  private CalculationMode currentMode = CalculationMode.Installment;

  private enum CalculationMode
  {
    Installment,
    Duration
  }

  private void SetMode(CalculationMode mode)
  {
    currentMode = mode;
    responseMessage = string.Empty;
  }

  private async Task CalculateInstallment()
  {
    if (amount <= 0 || numberOfInstallments <= 0)
    {
      responseMessage = "Please enter valid values for amount and number of installments.";
      return;
    }

    var request = new CalculateInstallmentRequest { Amount = amount, NumberOfInstallments = numberOfInstallments };
    var client = HttpClientFactory.CreateClient("MyHttpClient");
    try
    {
      var response = await client.PostAsJsonAsync("api/Calculator/calculate-installment", request);
      if (response.IsSuccessStatusCode)
      {
        var resultDto = await response.Content.ReadFromJsonAsync<CalculationResult>();
        responseMessage = $"The monthly installment is: ${resultDto.Result:F2}";
      }
      else
      {
        var error = await response.Content.ReadAsStringAsync();
        responseMessage = $"Error: {response.StatusCode} - {error}";
      }
    }
    catch (Exception ex)
    {
      responseMessage = $"An error occurred: {ex.Message}";
    }
  }

  private async Task CalculateDuration()
  {
    if (amount <= 0 || monthlyInstallment <= 0)
    {
      responseMessage = "Please enter valid values for amount and monthly installment.";
      return;
    }

    var request = new CalculateDurationRequest { Amount = amount, MonthlyInstallment = monthlyInstallment };
    var client = HttpClientFactory.CreateClient("MyHttpClient");
    try
    {
      var response = await client.PostAsJsonAsync("api/Calculator/calculate-duration", request);
      if (response.IsSuccessStatusCode)
      {
        var resultDto = await response.Content.ReadFromJsonAsync<CalculationResult>();
        responseMessage = $"The number of installments is: {resultDto.Result:F0}";
      }
      else
      {
        var error = await response.Content.ReadAsStringAsync();
        responseMessage = $"Error: {response.StatusCode} - {error}";
      }
    }
    catch (Exception ex)
    {
      responseMessage = $"An error occurred: {ex.Message}";
    }
  }
}
